{"mappings":"MAEaA,cAIWC,EAAiCC,EAA4BC,QAA7DF,UAAAA,OAAiCC,OAAAA,OAA4BC,IAAAA,OAFjFC,WAAY,EAGRC,QAAQC,IAAG,YAAYC,KAAON,UAAUO,KAAGD,KAAON,UAAUQ,aAAWF,KAAOL,OAAOM,KAAGD,KAAOL,OAAOO,MAG1GC,QAASC,UACIA,EAAEP,WAAc,EAAK,EAGlCQ,eAEUC,EAACN,KAAQJ,IAAIW,cAAaP,KAAMN,cAE7BO,EAACC,EAAEA,GAACF,KAAUN,mBAEfc,EAASC,MAAIC,MAAIA,IAAKV,KAAYJ,IAE1CY,EAAQG,OAcRH,EAAQI,YAERJ,EAAQK,OAAOP,EAAEQ,IAAIb,EAAGK,EAAEQ,IAAIZ,GAE9BM,EAAQO,OAAOT,EAAEU,KAAKf,EAAGK,EAAEU,KAAKd,GAChCM,EAAQO,OAAOT,EAAEW,OAAOhB,EAAGK,EAAEW,OAAOf,GACpCM,EAAQO,OAAOT,EAAEY,MAAMjB,EAAGK,EAAEY,MAAMhB,GAClCM,EAAQO,OAAOT,EAAEQ,IAAIb,EAAGK,EAAEQ,IAAIZ,GAC9BM,EAAQW,YAAW,QAGnBX,EAAQY,SAIRZ,EAAQa,UAASrB,KAASH,UAAS,UAAgBa,EACnDF,EAAQc,YAGCzB,iBACA0B,qBACAC,eAGThB,EAAQiB,UAGJD,4BAEIhB,GAAOR,KAAUJ,OACjBK,EAACC,EAAEA,GAACF,KAAUN,UAEtBc,EAAQa,UAAS,QACjBb,EAAQkB,SAAQ,GAAA1B,KAAUL,OAAOM,KAAGD,KAAOL,OAAOO,IAAKD,EAAI,GAAIC,EAAI,IAG/DqB,8BAGIf,EAASC,MAAIkB,MAAIA,EAAKC,OAAEA,IAAM5B,KAAYJ,KAC1CiC,SAAO5B,EAAIA,EAACC,EAAEA,IAACF,KAAYJ,IAAIkC,YAAW9B,KAAMN,WACxDc,EAAQI,YACRJ,EAAQuB,KAAM9B,EAAGC,EAAGyB,EAAOC,GAC3BpB,EAAQY,gBC1EHY,EAONC,YACiBvC,EAAkCE,QAAlCF,UAAAA,OAAkCE,IAAAA,EAClDE,QAAQC,IAAG,QAAWL,GAG1BS,QAASC,SAEC8B,EAAElC,KAAQN,UAAUQ,EAAIE,EAAEV,UAAUQ,SAC/B,IAAPgC,EAAQlC,KACIN,UAAUO,EAAIG,EAAEV,UAAUO,EAEnCiC,EAGX7B,iBACWJ,EAACC,EAACA,GAACF,KAASN,mBAEXc,EAASC,MAAIkB,MAAGA,EAAKC,OAAEA,EAAMlB,MAAEA,IAAKV,KAAYJ,IAGxDY,EAAQI,YAERJ,EAAQK,OAAOZ,EAAI0B,EAAQ,EAAGzB,EAAI0B,GAClCpB,EAAQO,OAAOd,EAAI0B,EAAOzB,EAAI0B,EAAS,GACvCpB,EAAQO,OAAOd,EAAI0B,EAAQ,EAAGzB,GAC9BM,EAAQO,OAAOd,EAAGC,EAAI0B,EAAS,GAC/BpB,EAAQO,OAAOd,EAAI0B,EAAQ,EAAIzB,EAAI0B,GAEnCpB,EAAQa,UAAS,UACjBb,EAAQc,OAGRd,EAAQI,YAERJ,EAAQK,OAAOZ,EAAI0B,EAAOzB,EAAI0B,EAAS,GACvCpB,EAAQO,OAAOd,EAAI0B,EAAOzB,EAAI0B,EAAS,GACvCpB,EAAQO,OAAOd,EAAI0B,EAAQ,EAAGzB,EAAI0B,GAClCpB,EAAQO,OAAOd,EAAI0B,EAAQ,EAAGzB,GAC9BM,EAAQO,OAAOd,EAAI0B,EAAOzB,EAAI0B,EAAS,GAEvCpB,EAAQa,UAAS,UACjBb,EAAQc,OAGRd,EAAQI,YAERJ,EAAQK,OAAOZ,EAAI0B,EAAQ,EAAGzB,GAC9BM,EAAQO,OAAOd,EAAGC,EAAI0B,EAAS,GAC/BpB,EAAQO,OAAOd,EAAGC,EAAI0B,EAAS,GAC/BpB,EAAQO,OAAOd,EAAI0B,EAAQ,EAAGzB,EAAI0B,GAClCpB,EAAQO,OAAOd,EAAI0B,EAAQ,EAAGzB,GAE9BM,EAAQa,UAAS,UACjBb,EAAQc,cC5DVa,cAOmBC,EAAqBC,QAArBD,MAAAA,OANrBE,QAAS,OACTC,MAAO,QAOGC,EAAeC,IACbA,EAAMC,MAAG1C,KAAUoC,aACZG,MAAIvC,KAAS2C,OAAK3C,KAAO2C,aAC7BL,QAAS,OACTC,MAAO,EACZE,EAAMG,mBAINC,EAAaJ,IACXA,EAAMC,MAAG1C,KAAUoC,aACZE,QAAMtC,KAAS8C,SAAO9C,KAAO8C,eACjCR,QAAS,OACTC,MAAO,EACZE,EAAMG,mBAIZP,EAAOU,iBAAgB,UAAaP,GAA8B,GAClEH,EAAOU,iBAAgB,QAAWF,GAA4B,QAEzDG,YAAW,KACZX,EAAOY,oBAAmB,UAAaT,GAA8B,GACrEH,EAAOY,oBAAmB,QAAWJ,GAA4B,WAShEK,cAOIC,SAEHC,EAAeX,SACRE,OAAK3C,KAAO2C,MAAMF,GAC3BA,EAAMG,kBAGJS,EAAaZ,SACNa,IAAEtD,KAAOsD,GAAGb,GACrBA,EAAMG,kBAGJW,EAAed,SACVe,MAAIxD,KAAOwD,KAAKf,GACzBA,EAAMG,kBAGRO,EAAOJ,iBAAgB,YAAeK,GAA8B,GACpED,EAAOJ,iBAAgB,UAAaM,GAA4B,GAChEF,EAAOJ,iBAAgB,YAAeQ,GAA8B,QAE/DP,YAAW,KACZG,EAAOF,oBAAmB,YAAeG,GAA8B,GACvED,EAAOF,oBAAmB,UAAaI,GAA4B,GACnEF,EAAOF,oBAAmB,YAAeM,GAA8B,IAW/EE,iBAAiBhB,SACTiB,EAAOjB,EAAMJ,UAEP,MAARqB,EAAY,OAAU,WAEpB3B,EAAO2B,EAAKC,+BAGd1D,EAAGwC,EAAMmB,QAAU7B,EAAKf,KACxBd,EAAGuC,EAAMoB,QAAU9B,EAAKjB,YAMrBgD,EAAQ,CAAKC,EAAqBC,EAAqBC,WAAQ,IAAW9B,EAAI4B,EAAOC,GC1F5FE,EAASD,SAASE,eAAc,SAGhCC,EAAM,UCsDLnC,YACSoC,QAlBZ3E,UAAS,CAAmBO,EAAE,EAAGC,EAAE,QAQnCoE,aAAY,aAIZC,OAAM,IAAOC,IAsDVxE,KACHyE,MAAK,IAAAzE,KAAcQ,QAAQkE,UAAU,EAAG,EAAC1E,KAAO2E,OAAOhD,MAAK3B,KAAO2E,OAAO/C,QAsCvE5B,KACK4E,SAAQ,CAAKhF,EAAiBiF,EAAQ,WACpCC,EAAM9E,KAAQ+E,mBAAoBnF,GAClCoF,EAAM,IAAOvF,EAAMqF,EAAQlF,EAAGI,kBAC/BsE,aAAaO,GAAOI,KAAMD,GACxBA,GAORhF,KACKkF,WAAeL,GAAY7E,KAC1BsE,aAAaO,GAAOM,MAAI,CAAGC,EAAGC,IAAOD,EAAGjF,QAAQkF,KA8CtDrF,KACHsF,UAAS,CAAuBC,EAAUV,EAAQ,WAExCjF,EAAGI,KAAQwF,mBAAmBD,EAAO7F,wBAElC+F,QAAQ7F,UACR0E,aAAaO,GAAOI,KAAMM,IACxB,IA2BZvF,KACH+E,mBAAuBnF,IAAe,CAC9BK,GAAML,EAAIK,EAAEL,EAAIM,GAACF,KAASS,KAAKkB,MAAQ,EAAC3B,KAAUL,OAAOM,EACzDC,GAAMN,EAAIK,EAAEL,EAAIM,GAACF,KAASS,KAAKmB,OAAS,EAAC5B,KAAUL,OAAOO,IAO/DF,KACFO,cAAiBmF,IAAkB,CAChC5E,IAAG,CAAOb,EAAGyF,EAAIzF,EAACD,KAAQS,KAAKkB,MAAQ,EAAGzB,EAAGwF,EAAIxF,GACjDc,KAAI,CAAMf,EAAGyF,EAAIzF,EAACD,KAAQS,KAAKkB,MAAOzB,EAAGwF,EAAIxF,EAACF,KAAQS,KAAKmB,OAAS,GACpEV,MAAK,CAAKjB,EAAGyF,EAAIzF,EAAGC,EAAGwF,EAAIxF,EAACF,KAAQS,KAAKmB,OAAS,GAClDX,OAAM,CAAIhB,EAAGyF,EAAIzF,EAACD,KAAQS,KAAKkB,MAAQ,EAAGzB,EAAGwF,EAAIxF,EAACF,KAAQS,KAAKmB,UAOhE5B,KACH8B,YAAe4D,IAAkB,CACzBC,SAAgBD,EAChBE,WAAU,CAAQ3F,EAAGyF,EAAIzF,EAACD,KAAQS,KAAKkB,MAAOzB,EAAGwF,EAAIxF,EAACF,KAAQS,KAAKmB,QACnEiE,YAAW,CAAO5F,EAAEyF,EAAIzF,EAAGC,EAAGwF,EAAIxF,EAACF,KAAQS,KAAKmB,QAChDC,QAAO,CAAW5B,EAAGyF,EAAIzF,EAACD,KAAQS,KAAKkB,MAAOzB,EAAGwF,EAAIxF,KAO1DF,KACHyF,QAAWK,GACFA,EAAS7F,GAAK,GAAK6F,EAAS7F,EAACD,KAAQ+F,QAAQpE,OACvCmE,EAAS5F,GAAK,GAAK4F,EAAS5F,EAACF,KAAQ+F,QAAQnE,aAxNlD+C,EAASV,SAASE,eAAeE,EAAO2B,UAAQ,aAExC,MAAVrB,EAAc,MAAA,IAAasB,MAAK,yBAC9BzF,EAAUmE,EAAOuB,WAAU,SAClB,MAAX1F,EAAe,MAAA,IAAayF,MAAK,wCAEhCE,QAAUxB,OACVnE,QAAUA,OAGV4F,WAAU,CACXzE,MAAO0C,EAAOS,OAAOnD,MACrBC,OAAQyC,EAAOS,OAAOlD,aAIrBmE,QAAO,CACRpE,MAAO0C,EAAO0B,QAAQpE,MACtBC,OAAQyC,EAAO0B,QAAQnE,aAItBnB,KAAI,CACLkB,MAAO0C,EAAOgC,SAAS1E,MACvBC,OAAQyC,EAAOgC,SAASzE,OACxBlB,MAAO2D,EAAO3D,OAAK,gBAIlBf,OAAM,CAAKM,EAACD,KAAMoG,WAAWzE,MAAQ,EAAGzB,EAAsB,EAArBF,KAAOS,KAAKmB,QAG9DzB,QAASC,UACE,EAKRuE,yBAEawB,QAahBG,cAESH,QAAQI,aAAY,QAAQ,GAAAvG,KAAUoG,WAAWzE,cACjDwE,QAAQI,aAAY,SAAS,GAAAvG,KAAUoG,WAAWxE,kBAG9C3B,EAAI,EAAGA,EAACD,KAAQ+F,QAAQpE,MAAO1B,IAAC,IAAA,IAC3BC,EAAI,EAAGA,EAACF,KAAQ+F,QAAQnE,OAAQ1B,IAACF,KAClC4E,SAAQ,CAAG3E,EAAEA,EAAGC,EAAEA,SAI1BsG,kBAAoBC,aAAW,IAAAzG,KAAaK,UAAU,IAAK,IAMpEA,cACSoE,aACAS,WAAW,QACXZ,aAAa,GAAGoC,SAASpG,GAAMA,EAAED,gBACjC6E,WAAW,QACXZ,aAAa,GAAGoC,SAASpG,GAAMA,EAAED,WA+BjCsG,YAA+B9B,EAAc+B,eACtCtC,aAAaO,GAAOgC,KAAMD,GAO1CE,oBAAqBpH,eACLiH,YAAmB,GAAC,CAAIvG,EAAG2G,WAE7BC,EAAMhH,KAAQwF,mBAAmB9F,WAC/BC,GAAWS,SAEZT,EAAOM,IAAM+G,EAAO/G,GAAKN,EAAOO,IAAM8G,EAAO9G,KAS3D+G,iBAAkBD,eACHL,YAAmB,GAAC,CAAIvG,EAAG2G,kBAE3BpH,GAAWS,SAEZT,EAAOM,IAAM+G,EAAO/G,GAAKN,EAAOO,IAAM8G,EAAO9G,KA6B5DsF,mBAAoBV,SAEV7E,GAAK6E,EAAO7E,EAACD,KAAQL,OAAOM,GAACD,KAASS,KAAKkB,MAC3CzB,GAAK4E,EAAO5E,EAACF,KAAQL,OAAOO,GAACF,KAASS,KAAKmB,cAG7C3B,EAAGiH,KAAKC,MAAMjH,EAAID,GAClBC,EAAGgH,KAAKC,MAAMjH,EAAID,IAqD1BmH,cAAeC,GAEXA,EAAMX,SAASY,UACLC,ECvSG,CAAKD,UAChB5D,EAAO4D,EAAKE,MAAK,QACnB9D,EAAK+D,OAAS,EAAC,OACTC,EAAOhE,EAAMA,EAAK+D,OAAS,GAC3BzC,EAAM,eAAkB2C,KAAKD,MACrB,MAAV1C,EAAc,OACPA,EAAO,KDiSD4C,CAASN,MAElBC,EAAI,KACAvC,EAAM,IAAO6C,MACjB7C,EAAO8C,IAAMR,EACbtC,EAAO+C,OAAWtF,IACd3C,QAAQC,IAAG,SAAWwH,gBAAmBD,WAAe7E,SAEvD8B,OAAOyD,IAAKT,EAAMvC,QAGvBlF,QAAQmI,KAAI,eAAiBX,sBAYzCY,YAAaC,EAAiBzI,SACpB0I,EAAMpI,KAAQuE,OAAO8D,IAAKF,MAE5BC,EAAM,OACExC,YAAU3F,EAAGA,EAACC,EAAEA,IAACF,KAAW8B,YAAYpC,QAC3Cc,QAAQ8H,UAAWF,EAAQnI,EAAGC,EAAIkI,EAAQG,kBDjU/C,CACRzD,OAAM,CAAInD,MAAO,KAAMC,OAAQ,KAC/BmE,QAAO,CAAIpE,MAAO,GAAIC,OAAQ,IAC9ByE,SAAQ,CAAI1E,MAAO,GAAIC,OAAQ,MAOnCwC,EAAOkC,SACPlC,EAAOgD,WAAU,oBAAqB,oBAAqB,oBAAqB,0BAE5EoB,EAAO1E,EAAQ,aACb2E,EAAK3E,EAAQ,WACb4E,EAAQ5E,EAAQ,cAChB6E,EAAO7E,EAAQ,mBAGf8E,GD8EiB5E,EC9EDC,SAAS4E,KD8EM,IAAW3F,EAAMc,IAApC,IAAKA,MCjEnB8E,EAXJF,EAAOjG,MAAUF,QACLiD,EAAMkD,EAAOnF,iBAAiBhB,GAEvB,MAAPiD,IAEAA,EAAMtB,EAAOoB,mBAAmBE,GAEhCtB,EAAOkB,UAAS,IAAMtD,EAAOoC,EAAOW,mBAAoBW,GAAOtB,MAM3EwE,EAAOpF,KAAQf,UACLsG,EAAWH,EAAOnF,iBAAiBhB,MAEzB,MAAZsG,EAAgB,OAEVrD,EAAMtB,EAAOoB,mBAAmBuD,GAEtC7E,EAAQ8E,UAAS,IAAOD,EAAS9I,KAAK8I,EAAS7I,SAASwF,EAAIzF,KAAKyF,EAAIxF,WAC/DO,EAAO2D,EAAO6C,iBAAiBvB,GAEjCjF,IACIqI,IACAA,EAASjJ,WAAY,GAGzBiJ,EAAWrI,EACXqI,EAASjJ,WAAY,WAQ3BoJ,EAAM,sBGzDYtJ,EAA4BC,QAA5BD,OAAAA,OAA4BC,IAAAA,OAJhD4D,KAAI,YACJ0F,aAAY,cAIHxJ,UAAYE,EAAImF,mBAAoBpF,GAG7CQ,QAASC,SAEC8B,EAAElC,KAAQN,UAAUQ,EAAIE,EAAEV,UAAUQ,SAC/B,IAAPgC,EAAQlC,KACIN,UAAUO,EAAIG,EAAEV,UAAUO,EAEnCiC,EAGX7B,qBAEiBmD,sBAGI5D,IAAI6F,QAAO,CAAIxF,EAACD,KAAML,OAAOM,EAAE,EAAEC,EAACF,KAAML,OAAOO,WAC/CP,OAAOM,GAAI,OACXiJ,aAAY,gCAIZtJ,IAAI6F,QAAO,CAAIxF,EAACD,KAAML,OAAOM,EAAEC,EAACF,KAAML,OAAOO,EAAE,WAC/CP,OAAOO,GAAI,OACXgJ,aAAY,iCAIZtJ,IAAI6F,QAAO,CAAIxF,EAACD,KAAML,OAAOM,EAAEC,EAACF,KAAML,OAAOO,EAAE,WAC/CP,OAAOO,GAAI,OACXgJ,aAAY,8BAIZtJ,IAAI6F,QAAO,CAAIxF,EAACD,KAAML,OAAOM,EAAE,EAAEC,EAACF,KAAML,OAAOO,WAC/CP,OAAOM,GAAI,OACXiJ,aAAY,eAIxBxJ,UAASM,KAAQJ,IAAImF,mBAAkB/E,KAAML,aAC7CC,IAAIsI,YAAWlI,KAAMkJ,aAAYlJ,KAAON,aHc5B,CAAIO,EAAE,EAAGC,EAAE,GAAIkE,GAExCA,EAAOkB,UAAW2D,GAElBT,EAAK7F,MAAK,KACNsG,EAAOzF,KAAI,QAEfgF,EAAK1F,QAAO,KACRmG,EAAOzF,KAAI,QAGfkF,EAAM/F,MAAK,KACPsG,EAAOzF,KAAI,SAEfkF,EAAM5F,QAAO,KACTmG,EAAOzF,KAAI,QAGfiF,EAAG9F,MAAK,KACJsG,EAAOzF,KAAI,MAEfiF,EAAG3F,QAAO,KACNmG,EAAOzF,KAAI,QAIfmF,EAAKhG,MAAK,KACNsG,EAAOzF,KAAI,QAEfmF,EAAK7F,QAAO,KACRmG,EAAOzF,KAAI","sources":["src/iso.tile.ts","src/iso.prism.ts","src/iso.input.ts","src/index.ts","src/iso.ts","src/iso.utils.ts","src/iso.person.ts"],"sourcesContent":["import { Entity, MapPosition, ScreenPosition, TileMap } from './iso'\n\nexport class Tile implements Entity { \n\n    highlight = false\n\n    constructor( public screenPos:ScreenPosition, public mapPos:MapPosition, private map:TileMap) {\n        console.log( `screen: [${this.screenPos.x},${this.screenPos.y}} - map:[${this.mapPos.x},${this.mapPos.y}]`)\n    }\n\n    compare( e:Tile ):number {\n        return ( e.highlight ) ? -1 : 0\n    }\n\n    render():void {\n\n        const v = this.map.getTileVertex(this.screenPos)\n\n        const  { x, y } = this.screenPos // topRight\n        \n        const { context, tile: { color } } = this.map\n\n        context.save()\n\n\n        /**\n         * create four lines\n         * --------------------------------------------\n         *    step 1  |  step 2  |  step 3  |  step 4\n         * --------------------------------------------\n         *    /       |  /       |  /       |  /\\  \n         *            |  \\       |  \\/      |  \\/\n         * --------------------------------------------\n         */\n\n        // begin\n        context.beginPath()\n        // move to start point\n        context.moveTo(v.top.x, v.top.y)\n        // define lines\n        context.lineTo(v.left.x, v.left.y)\n        context.lineTo(v.bottom.x, v.bottom.y)\n        context.lineTo(v.right.x, v.right.y)\n        context.lineTo(v.top.x, v.top.y)        \n        context.strokeStyle = 'black'\n\n        // draw path\n        context.stroke()\n    \n\n        // fill tile\n        context.fillStyle = (this.highlight) ? '#ffff00' : color\n        context.fill() \n    \n        // Debug\n        if( this.highlight ) {\n            this._drawTileRect()\n            this._drawMapPos()\n        }\n\n        context.restore()\n    }\n\n    private _drawMapPos() {\n\n        const { context } = this.map\n        const { x, y } = this.screenPos // topRight\n\n        context.fillStyle = 'black'\n        context.fillText( `${this.mapPos.x},${this.mapPos.y}`, x - 40, y + 20 )\n\n    }\n    private _drawTileRect( ) {\n\n        // Debug\n        const { context, tile: { width, height } } = this.map\n        const { topLeft: { x, y } } = this.map.getTileRect(this.screenPos)\n        context.beginPath()\n        context.rect( x, y, width, height)\n        context.stroke()\n\n    }\n}","import { Entity, ScreenPosition, TileMap } from './iso'\n\n/**\n * \n */\nexport class Prism implements Entity {\n\n    /**\n     * \n     * @param x - map x position\n     * @param y - map y position\n     * @param map \n     */\n    constructor( public screenPos:ScreenPosition, private map:TileMap) {\n        console.log( 'prism', screenPos )\n    }\n\n    compare( e:Prism ):number {\n        \n        const dy = this.screenPos.y - e.screenPos.y \n        if( dy === 0 ) {\n            return this.screenPos.x - e.screenPos.x\n        }\n        return dy\n    }\n\n    render() {\n        const {x,y} = this.screenPos\n\n        const { context, tile: {width, height, color } } = this.map\n\n        // top\n        context.beginPath()\n\n        context.moveTo(x - width / 2, y - height)\n        context.lineTo(x - width, y - height / 2)\n        context.lineTo(x - width / 2, y)\n        context.lineTo(x, y - height / 2)\n        context.lineTo(x - width / 2,  y - height)\n\n        context.fillStyle = '#555555'\n        context.fill()\n\n        // left\n        context.beginPath()\n\n        context.moveTo(x - width, y - height / 2)\n        context.lineTo(x - width, y + height / 2)\n        context.lineTo(x - width / 2, y + height)\n        context.lineTo(x - width / 2, y)\n        context.lineTo(x - width, y - height / 2)\n\n        context.fillStyle = '#444444'\n        context.fill()\n\n        // right\n        context.beginPath()\n\n        context.moveTo(x - width / 2, y)\n        context.lineTo(x, y - height / 2)\n        context.lineTo(x, y + height / 2)\n        context.lineTo(x - width / 2, y + height)\n        context.lineTo(x - width / 2, y)\n\n        context.fillStyle = '#777777'\n        context.fill()            \n    }\n}\n","import { ScreenPosition } from \"./iso\";\n\nexport type KeyBoardValue = 'ArrowLeft'|'ArrowUp'|'ArrowRight'|'ArrowDown'\n\n\nclass Key {\n    isDown = false;\n    isUp = true;\n    press?:() => void\n    release?: () => void\n    unsubscribe:() => void\n\n    constructor( private value:KeyBoardValue, target:EventTarget ) {\n\n        const downHandler = (event:KeyboardEvent) => {\n            if (event.key === this.value) {\n              if (this.isUp && this.press) this.press()\n              this.isDown = true\n              this.isUp = false\n              event.preventDefault()\n            }\n          }\n        \n        const upHandler = (event:KeyboardEvent) => {\n            if (event.key === this.value) {\n              if (this.isDown && this.release) this.release()\n              this.isDown = false\n              this.isUp = true\n              event.preventDefault()\n            }\n          }\n        \n        target.addEventListener( 'keydown', downHandler as EventListener, false )\n        target.addEventListener( 'keyup', upHandler as EventListener, false )\n    \n        this.unsubscribe = () => {\n            target.removeEventListener( 'keydown', downHandler as EventListener, false )\n            target.removeEventListener( 'keyup', upHandler as EventListener, false )\n    \n        }\n    }\n\n\n  \n}\n\nexport class Mouse {\n    press?:( event:MouseEvent ) => void\n    up?: ( event:MouseEvent ) => void\n    move?: ( event:MouseEvent ) => void\n\n    unsubscribe:() => void\n\n    constructor( target:Element ) {\n\n        const downHandler = (event:MouseEvent) => {\n            if (this.press) this.press(event)\n            event.preventDefault()\n        }\n        \n        const upHandler = (event:MouseEvent) => {\n            if (this.up) this.up(event)\n            event.preventDefault()\n        }\n\n        const moveHandler = (event:MouseEvent) => {\n          if (this.move) this.move(event)\n          event.preventDefault()\n        }\n        \n        target.addEventListener( 'mousedown', downHandler as EventListener, false )\n        target.addEventListener( 'mouseup', upHandler as EventListener, false )\n        target.addEventListener( 'mousemove', moveHandler as EventListener, false )\n    \n        this.unsubscribe = () => {\n            target.removeEventListener( 'mousedown', downHandler as EventListener, false )\n            target.removeEventListener( 'mouseup', upHandler as EventListener, false )\n            target.removeEventListener( 'mousemove', moveHandler as EventListener, false )\n        }\n\n        \n    }  \n\n    /**\n    * \n    * @param event \n    * @returns \n    */\n    getMousePosition(event:MouseEvent):ScreenPosition|null {\n      const elem = event.target as Element|null;\n\n      if( elem == null ) return null\n\n      const rect = elem.getBoundingClientRect()\n\n      return {\n          x: event.clientX - rect.left,\n          y: event.clientY - rect.top\n      }\n  }\n\n}\n\nexport const keyboard = ( value:KeyBoardValue, target:EventTarget = document ) => (new Key(value, target))\nexport const mouse = ( target:Element ) => (new Mouse(target))\n","import { MapParameters, TileMap } from './iso'\nimport { Tile } from './iso.tile'\nimport { Prism } from './iso.prism'\nimport { Person } from './iso.person'\nimport { keyboard, mouse } from './iso.input' \n\n// isometric map settings\nconst params:MapParameters = {\n    screen: { width: 1024, height: 800 },\n    mapSize: { width: 14, height: 14 },\n    tileSize: { width: 64, height: 32 }\n}\n\nconst outDiv = document.getElementById('debug')\n\n// create map\nconst isoMap = new TileMap(params);\nisoMap.create();\nisoMap.loadImages( 'assets/man-ne.png', 'assets/man-nw.png', 'assets/man-se.png',' assets/man-sw.png' )\n\nlet left = keyboard(\"ArrowLeft\"),\n      up = keyboard(\"ArrowUp\"),\n      right = keyboard(\"ArrowRight\"),\n      down = keyboard(\"ArrowDown\");\n\n// const _mouse = mouse( isoMap.canvas )\nconst _mouse = mouse( document.body )\n\n_mouse.press =  (event) => {\n        let pos = _mouse.getMousePosition(event)\n\n        if( pos != null ) {\n\n            pos = isoMap.convertScreenToIso(pos) // adjust position on map\n                \n            isoMap.addEntity( new Prism( isoMap.convertIsoToScreen( pos ), isoMap) )\n        }\n}\n\nlet lastTile:Tile|undefined\n\n_mouse.move = (event) => {\n    const mousepos = _mouse.getMousePosition(event)\n\n    if( mousepos != null ) {\n\n        const pos = isoMap.convertScreenToIso(mousepos) // adjust position on map\n    \n        outDiv!.innerHTML = `[${mousepos.x},${mousepos.y}] - [${pos.x},${pos.y}]`\n        const tile = isoMap.findTileByIsoPos(pos)\n\n        if( tile ) {\n            if( lastTile ) {\n                lastTile.highlight = false\n            }\n            //console.log( `${tile.mapPos.x},${tile.mapPos.y}`)\n            lastTile = tile \n            lastTile.highlight = true\n        }\n    }\n}\n\n// const img = new ImageEntity('man-ne', isoMap.convertIsoToScreen( {x:1, y:0} ), isoMap )\n// isoMap.addEntity( img )\n\nconst person = new Person(  {x:1, y:1}, isoMap )\n\nisoMap.addEntity( person )\n\nleft.press = () => {\n    person.move = 'left'\n}\nleft.release = () => { \n    person.move = 'none'\n}\n\nright.press = () => {\n    person.move = 'right'\n}\nright.release = () => { \n    person.move = 'none'\n}\n\nup.press = () => {\n    person.move = 'up'\n}\nup.release = () => { \n    person.move = 'none'\n}\n\n\ndown.press = () => { \n    person.move = 'down'\n}\ndown.release = () => { \n    person.move = 'none'\n}\n","\nimport { basename } from './iso.utils'\nimport { Tile } from './iso.tile'\nimport { Mouse, mouse } from './iso.input'\n\nexport type Position = {\n    x:number\n    y:number\n}\n\nexport type MapPosition = Position\nexport type ScreenPosition = Position\n\nexport type TileVertex = {\n    top:Position\n    left:Position\n    right:Position\n    bottom:Position\n}\n\nexport type TileRect = {\n    topRight:Position\n    topLeft:Position\n    bottomRight:Position\n    bottomLeft:Position\n}\n\nexport type Size = {\n    width:number\n    height:number\n}\n\nexport type MapParameters = {\n    screen:Size\n    mapSize:Size\n    tileSize:Size\n    canvasId?:string\n    color?:string\n}\n\nexport interface Entity {\n    \n    screenPos:ScreenPosition\n\n    render():void\n\n    compare( e:Entity ):number\n}\n\nexport class TileMap implements Entity {\n\n    private _canvas:HTMLCanvasElement\n    context:CanvasRenderingContext2D\n    screenPos:ScreenPosition = {x:0, y:0}\n\n    screenSize:Size\n    mapSize:Size\n    tile:Size & { color:string }\n\n    mapPos:MapPosition\n\n    renderLayers:[ Array<Entity>, Array<Entity> ] = [  [], [] ]\n\n    gameLoopItnterval?:NodeJS.Timer\n\n    images = new Map<string,HTMLImageElement>()\n\n    /**\n     * @desc constructor\n     * @param object $params - initial parameters\n     */\n    constructor(params:MapParameters) {\n\n        const canvas = document.getElementById(params.canvasId ?? 'canvas') as HTMLCanvasElement|null\n\n        if( canvas == null ) throw new Error(\"canvas is null!\")\n        const context = canvas.getContext('2d')\n        if( context == null ) throw new Error(\"2d context from canvas is null!\")\n        \n        this._canvas = canvas\n        this.context = context\n    \n        // canvas area details\n        this.screenSize = { \n            width: params.screen.width,\n            height: params.screen.height\n            };\n\n        // size of isometric map\n        this.mapSize = {\n            width: params.mapSize.width,\n            height: params.mapSize.height\n        };\n\n        // size of single tile\n        this.tile = {\n            width: params.tileSize.width,\n            height: params.tileSize.height,\n            color: params.color ?? '#15B89A'\n        }\n\n        // initial position of isometric map\n        this.mapPos = { x:this.screenSize.width / 2, y: this.tile.height * 2 }\n    }\n\n    compare( e:TileMap ):number {\n        return 0\n    }\n\n    /**\n     * \n     */\n    get canvas():HTMLCanvasElement {\n        return this._canvas\n    }\n\n    /**\n     * \n     * @returns \n     */\n    clear = () => this.context.clearRect(0, 0, this.canvas.width, this.canvas.height)\n    \n\n    /**\n     * @desc draw isometric map\n     */\n    create() {\n        // set canvas size\n        this._canvas.setAttribute('width', `${this.screenSize.width}`);\n        this._canvas.setAttribute('height', `${this.screenSize.height}`);\n\n        // tiles drawing loops\n        for (let x = 0; x < this.mapSize.width; x++) {\n            for ( let y = 0; y < this.mapSize.height; y++) {\n                this._addTile( {x:x, y:y } )\n            }\n        }\n        \n        this.gameLoopItnterval = setInterval( () => this.render(), 1000/30 )\n    }\n\n    /**\n     * \n     */\n    render():void {\n        this.clear()\n        this._sortLayer(0)\n        this.renderLayers[0].forEach( v =>  v.render() )\n        this._sortLayer(1)\n        this.renderLayers[1].forEach( v =>  v.render() )\n\n    }\n    \n    /**\n     * @desc add a single tile to a layer\n     * @param int $x - position x on canvas area\n     * @param int $y - position y on canvas area\n     * @param layer \n     */\n    private _addTile = ( map:MapPosition, layer = 0):Tile => {\n        const screen = this.convertIsoToScreen( map) \n        const result = new Tile( screen, map, this )\n        this.renderLayers[layer].push( result )\n        return result\n    }\n\n    /**\n     * \n     * @param layer \n     * @returns \n     */\n    private _sortLayer = ( layer:number ) => \n        this.renderLayers[layer].sort( ($1,$2) => $1.compare($2) )\n\n    /**\n     * \n     * @param layer \n     * @param predicate \n     * @returns \n     */\n    private  _findEntity<T extends Entity>( layer:number, predicate:( entity:Entity, index:number ) => boolean ):T|undefined {\n        return this.renderLayers[layer].find( predicate ) as T\n    }\n\n    /**\n     * \n     * @param screenPos \n     */\n    findTileByScreenPos( screenPos:ScreenPosition ) {\n        return this._findEntity<Tile>( 0, ( e, i ) => {\n\n            const isoPos = this.convertScreenToIso(screenPos)\n            const { mapPos } = e as Tile\n\n            return mapPos.x === isoPos.x && mapPos.y === isoPos.y \n\n        })\n    }\n\n    /**\n     * \n     * @param screenPos \n     */\n     findTileByIsoPos( isoPos:MapPosition ) {\n        return this._findEntity<Tile>( 0, ( e, i ) => {\n\n            const { mapPos } = e as Tile\n\n            return mapPos.x === isoPos.x && mapPos.y === isoPos.y \n\n        })\n    }\n\n    /**\n     * add single prism to a layer\n     * @param x - position x on canvas area\n     * @param y - position y on canvas area\n     * @param layer \n     */\n    addEntity = <T extends Entity>( entity:T, layer = 1 ):boolean =>  {\n\n        const map = this.convertScreenToIso(entity.screenPos)\n\n        if( this.isOnMap(map) ) {\n            this.renderLayers[layer].push( entity )\n            return true\n\n        }\n\n        return false\n    }\n\n    /**\n     * \n     * @param screen \n     * @returns \n     */\n    convertScreenToIso( screen:ScreenPosition ):MapPosition {\n        \n        const x = (screen.x - this.mapPos.x) / this.tile.width\n        const y = (screen.y - this.mapPos.y) / this.tile.height\n\n        return { \n            x: Math.floor(y + x), \n            y: Math.floor(y - x)  \n        }\n    }\n\n    /**\n     * \n     * @param map \n     * @returns \n     */\n    convertIsoToScreen = ( map:MapPosition ):ScreenPosition  => ({\n            x: ( (map.x-map.y) * this.tile.width / 2 ) + this.mapPos.x,\n            y: ( (map.x+map.y) * this.tile.height / 2 ) + this.mapPos.y\n        })\n\n    /**\n     * \n     * @param pos \n     * @returns \n     */\n     getTileVertex = (pos:ScreenPosition):TileVertex => ({\n        top:    { x: pos.x - this.tile.width / 2, y: pos.y  },\n        left:   { x: pos.x - this.tile.width, y: pos.y + this.tile.height / 2 },\n        right:  { x: pos.x, y: pos.y + this.tile.height / 2 },\n        bottom: { x: pos.x - this.tile.width / 2, y: pos.y + this.tile.height }\n    })\n\n    /**\n     * \n     * @param pos \n     * @returns \n     */\n    getTileRect = (pos:ScreenPosition):TileRect => ({\n            topRight:       pos,\n            bottomLeft:     { x: pos.x - this.tile.width, y: pos.y + this.tile.height },\n            bottomRight:    { x:pos.x, y: pos.y + this.tile.height },\n            topLeft:        { x: pos.x - this.tile.width, y: pos.y }\n        })\n\n    /**\n     * \n     * @param position \n     * @returns \n     */\n    isOnMap = (position:MapPosition):boolean  => \n            (position.x >= 0 && position.x < this.mapSize.width \n                && position.y >= 0 && position.y < this.mapSize.height) \n\n\n    /**\n     * \n     * @param path \n     * @returns \n     */\n    loadImages( ...paths: string[] )  {\n\n        paths.forEach( path => {\n            const name = basename(path)\n            \n            if( name ) {\n                let result = new Image()\n                result.src = path\n                result.onload = ( event:any ) => {\n                    console.log( `image ${name} from path: ${path} loaded`, event )\n                }\n                this.images.set( name, result)\n            }\n            else {\n                console.warn( `image path: ${path} is not valid!` )\n                // throw Error( `image path: ${path} is not valid!`)\n            }\n\n        })\n    }\n\n    /**\n     * \n     * @param basename \n     * @param screenPos \n     */\n    renderImage( basename:string, screenPos:ScreenPosition ):void {\n        const source = this.images.get( basename )\n\n        if( source ) {\n            const { bottomLeft: {x, y} } = this.getTileRect(screenPos)\n            this.context.drawImage( source, x, y - source!.naturalHeight )    \n        }\n    }\n\n}\n\n\n\n","/**\n * \n * @param path \n * @returns \n */\nexport const basename = ( path:string ):string|undefined => {\n    const elem = path.split(\"/\")\n    if( elem.length > 0 ) {\n        const last = elem[ elem.length - 1]\n        const result = /(.+)[.](.+)$/.exec(last)    \n        if( result != null ) {\n            return result[1]\n        }\n    }\n} \n    \n","import { Entity, ScreenPosition, MapPosition, TileMap } from './iso'\n\nexport class Person implements Entity {\n\n    move:'down'|'up'|'left'|'right'|'none' = 'none'\n    currentImage:string = 'man-se'\n    screenPos:ScreenPosition\n\n    constructor( public mapPos:MapPosition, private map:TileMap) {\n        this.screenPos = map.convertIsoToScreen( mapPos )\n    }\n\n    compare( e:Person ):number {\n        \n        const dy = this.screenPos.y - e.screenPos.y \n        if( dy === 0 ) {\n            return this.screenPos.x - e.screenPos.x\n        }\n        return dy\n    }\n\n    render():void {\n\n        switch( this.move ) {\n            case 'down':\n                \n                if( this.map.isOnMap( { x:this.mapPos.x+1,y:this.mapPos.y } ) ){\n                    this.mapPos.x +=1 \n                    this.currentImage = 'man-se'\n                }\n                break\n            case 'left':\n                if( this.map.isOnMap( { x:this.mapPos.x,y:this.mapPos.y+1} ) ){\n                    this.mapPos.y +=1 \n                    this.currentImage = 'man-sw'\n                }\n                break\n            case 'right':\n                if( this.map.isOnMap( { x:this.mapPos.x,y:this.mapPos.y-1 } ) ){\n                    this.mapPos.y -=1 \n                    this.currentImage = 'man-ne'\n                }\n                break\n            case 'up':\n                if( this.map.isOnMap( { x:this.mapPos.x-1,y:this.mapPos.y } ) ){                \n                    this.mapPos.x -=1 \n                    this.currentImage = 'man-nw'\n                    }\n                break\n        }\n        this.screenPos = this.map.convertIsoToScreen(this.mapPos)\n        this.map.renderImage(this.currentImage, this.screenPos )\n        \n    }\n}"],"names":["$8c16fa1d59734288940dd6104ed4bcc0$export$4cbd7057afcc19d","screenPos","mapPos","map","highlight","console","log","this","x","y","compare","e","render","v","getTileVertex","context","tile","color","save","beginPath","moveTo","top","lineTo","left","bottom","right","strokeStyle","stroke","fillStyle","fill","_drawTileRect","_drawMapPos","restore","fillText","width","height","topLeft","getTileRect","rect","$718fbb905372c26711d5aae570ddea86$export$c6ec6fa8b613b252","constructor","dy","$f7a0ca685fc15ff0733c8744dc854746$var$Key","value","target","isDown","isUp","downHandler","event","key","press","preventDefault","upHandler","release","addEventListener","unsubscribe","removeEventListener","$f7a0ca685fc15ff0733c8744dc854746$export$1e7d889471c16c64","target1","downHandler1","upHandler1","up","moveHandler","move","getMousePosition","elem","getBoundingClientRect","clientX","clientY","$f7a0ca685fc15ff0733c8744dc854746$export$ea6328a15d7d48c9","value1","target2","document","$a4018e003ec9cbe06ab0cc0137aa4e69$var$outDiv","getElementById","$a4018e003ec9cbe06ab0cc0137aa4e69$var$isoMap","params","renderLayers","images","Map","clear","clearRect","canvas","_addTile","layer","screen","convertIsoToScreen","result","push","_sortLayer","sort","$1","$2","addEntity","entity","convertScreenToIso","isOnMap","pos","topRight","bottomLeft","bottomRight","position","mapSize","canvasId","Error","getContext","_canvas","screenSize","tileSize","create","setAttribute","gameLoopItnterval","setInterval","forEach","_findEntity","predicate","find","findTileByScreenPos","i","isoPos","findTileByIsoPos","Math","floor","loadImages","paths","path","name","split","length","last","exec","$04b7f286a5ed5d84632c73262f84779c$export$6aeba2462e8c6a4","Image","src","onload","set","warn","renderImage","basename","source","get","drawImage","naturalHeight","$a4018e003ec9cbe06ab0cc0137aa4e69$var$left","$a4018e003ec9cbe06ab0cc0137aa4e69$var$up","$a4018e003ec9cbe06ab0cc0137aa4e69$var$right","$a4018e003ec9cbe06ab0cc0137aa4e69$var$down","$a4018e003ec9cbe06ab0cc0137aa4e69$var$_mouse","body","$a4018e003ec9cbe06ab0cc0137aa4e69$var$lastTile","mousepos","innerHTML","$a4018e003ec9cbe06ab0cc0137aa4e69$var$person","currentImage"],"version":3,"file":"index.190b992f.js.map"}